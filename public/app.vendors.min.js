/*! learning-emberjs 2013-12-12 */
!function(){var a,b;!function(){var c={},d={};a=function(a,b,d){c[a]={deps:b,callback:d}},b=function(a){if(d[a])return d[a];d[a]={};var e,f,g,h,i;if(e=c[a],!e)throw new Error("Module '"+a+"' not found.");f=e.deps,g=e.callback,h=[];for(var j=0,k=f.length;k>j;j++)"exports"===f[j]?h.push(i={}):h.push(b(f[j]));var l=g.apply(this,h);return d[a]=i||l}}(),function(){"undefined"==typeof DS&&(DS=Ember.Namespace.create({VERSION:"1.0.0-beta.2"}),"undefined"!=typeof window&&(window.DS=DS),Ember.libraries&&Ember.libraries.registerCoreLibrary("Ember Data",DS.VERSION))}(),function(){function a(a){return function(){return this[a].apply(this,arguments)}}var b=Ember.get,c=(Ember.set,Ember.isNone);DS.JSONSerializer=Ember.Object.extend({primaryKey:"id",applyTransforms:function(a,b){return a.eachTransformedAttribute(function(a,c){var d=this.transformFor(c);b[a]=d.deserialize(b[a])},this),b},normalize:function(a,b){return b?(this.applyTransforms(a,b),b):b},serialize:function(a,c){var d={};if(c&&c.includeId){var e=b(a,"id");e&&(d[b(this,"primaryKey")]=b(a,"id"))}return a.eachAttribute(function(b,c){this.serializeAttribute(a,d,b,c)},this),a.eachRelationship(function(b,c){"belongsTo"===c.kind?this.serializeBelongsTo(a,d,c):"hasMany"===c.kind&&this.serializeHasMany(a,d,c)},this),d},serializeAttribute:function(a,c,d,e){var f=b(this,"attrs"),g=b(a,d),h=e.type;if(h){var i=this.transformFor(h);g=i.serialize(g)}d=f&&f[d]||(this.keyForAttribute?this.keyForAttribute(d):d),c[d]=g},serializeBelongsTo:function(a,d,e){var f=e.key,g=b(a,f);f=this.keyForRelationship?this.keyForRelationship(f,"belongsTo"):f,d[f]=c(g)?g:b(g,"id"),e.options.polymorphic&&this.serializePolymorphicType(a,d,e)},serializeHasMany:function(a,c,d){var e=d.key,f=DS.RelationshipChange.determineRelationshipType(a.constructor,d);("manyToNone"===f||"manyToMany"===f)&&(c[e]=b(a,e).mapBy("id"))},serializePolymorphicType:Ember.K,extract:function(a,b,c,d,e){this.extractMeta(a,b,c);var f="extract"+e.charAt(0).toUpperCase()+e.substr(1);return this[f](a,b,c,d,e)},extractFindAll:a("extractArray"),extractFindQuery:a("extractArray"),extractFindMany:a("extractArray"),extractFindHasMany:a("extractArray"),extractCreateRecord:a("extractSave"),extractUpdateRecord:a("extractSave"),extractDeleteRecord:a("extractSave"),extractFind:a("extractSingle"),extractFindBelongsTo:a("extractSingle"),extractSave:a("extractSingle"),extractSingle:function(a,b,c){return this.normalize(b,c)},extractArray:function(a,b,c){return this.normalize(b,c)},extractMeta:function(a,b,c){c&&c.meta&&(a.metaForType(b,c.meta),delete c.meta)},transformFor:function(a){return this.container.lookup("transform:"+a)}})}(),function(){var a=Ember.get,b=Ember.String.capitalize,c=Ember.String.underscore,d=window.DS;d.DebugAdapter=Ember.DataAdapter.extend({getFilters:function(){return[{name:"isNew",desc:"New"},{name:"isModified",desc:"Modified"},{name:"isClean",desc:"Clean"}]},detect:function(a){return a!==d.Model&&d.Model.detect(a)},columnsForType:function(d){var e=[{name:"id",desc:"Id"}],f=0,g=this;return a(d,"attributes").forEach(function(a){if(f++>g.attributeLimit)return!1;var d=b(c(a).replace("_"," "));e.push({name:a,desc:d})}),e},getRecords:function(a){return this.get("store").all(a)},getRecordColumnValues:function(b){var c=this,d=0,e={id:a(b,"id")};return b.eachAttribute(function(f){if(d++>c.attributeLimit)return!1;var g=a(b,f);e[f]=g}),e},getRecordKeywords:function(b){var c=[],d=Ember.A(["id"]);return b.eachAttribute(function(a){d.push(a)}),d.forEach(function(d){c.push(a(b,d))}),c},getRecordFilterValues:function(a){return{isNew:a.get("isNew"),isModified:a.get("isDirty")&&!a.get("isNew"),isClean:!a.get("isDirty")}},getRecordColor:function(a){var b="black";return a.get("isNew")?b="green":a.get("isDirty")&&(b="blue"),b},observeRecord:function(a,b){var c=Ember.A(),d=this,e=Ember.A(["id","isNew","isDirty"]);a.eachAttribute(function(a){e.push(a)}),e.forEach(function(e){var f=function(){b(d.wrapRecord(a))};Ember.addObserver(a,e,f),c.push(function(){Ember.removeObserver(a,e,f)})});var f=function(){c.forEach(function(a){a()})};return f}})}(),function(){DS.Transform=Ember.Object.extend({serialize:Ember.required(),deserialize:Ember.required()})}(),function(){DS.BooleanTransform=DS.Transform.extend({deserialize:function(a){var b=typeof a;return"boolean"===b?a:"string"===b?null!==a.match(/^true$|^t$|^1$/i):"number"===b?1===a:!1},serialize:function(a){return Boolean(a)}})}(),function(){DS.DateTransform=DS.Transform.extend({deserialize:function(a){var b=typeof a;return"string"===b?new Date(Ember.Date.parse(a)):"number"===b?new Date(a):null===a||void 0===a?a:null},serialize:function(a){if(a instanceof Date){var b=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],c=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],d=function(a){return 10>a?"0"+a:""+a},e=a.getUTCFullYear(),f=a.getUTCMonth(),g=a.getUTCDate(),h=a.getUTCDay(),i=a.getUTCHours(),j=a.getUTCMinutes(),k=a.getUTCSeconds(),l=b[h],m=d(g),n=c[f];return l+", "+m+" "+n+" "+e+" "+d(i)+":"+d(j)+":"+d(k)+" GMT"}return null}})}(),function(){var a=Ember.isEmpty;DS.NumberTransform=DS.Transform.extend({deserialize:function(b){return a(b)?null:Number(b)},serialize:function(b){return a(b)?null:Number(b)}})}(),function(){var a=Ember.isNone;DS.StringTransform=DS.Transform.extend({deserialize:function(b){return a(b)?null:String(b)},serialize:function(b){return a(b)?null:String(b)}})}(),function(){Ember.set;Ember.onLoad("Ember.Application",function(a){a.initializer({name:"store",initialize:function(a,b){b.register("store:main",b.Store||DS.Store),b.register("serializer:_default",DS.JSONSerializer),b.register("serializer:_rest",DS.RESTSerializer),b.register("adapter:_rest",DS.RESTAdapter),a.lookup("store:main")}}),a.initializer({name:"transforms",initialize:function(a,b){b.register("transform:boolean",DS.BooleanTransform),b.register("transform:date",DS.DateTransform),b.register("transform:number",DS.NumberTransform),b.register("transform:string",DS.StringTransform)}}),a.initializer({name:"dataAdapter",initialize:function(a,b){b.register("dataAdapter:main",DS.DebugAdapter)}}),a.initializer({name:"injectStore",initialize:function(a,b){b.inject("controller","store","store:main"),b.inject("route","store","store:main"),b.inject("serializer","store","store:main"),b.inject("dataAdapter","store","store:main")}})})}(),function(){Ember.Date=Ember.Date||{};var a=Date.parse,b=[1,4,5,6,7,10,11];Ember.Date.parse=function(c){var d,e,f=0;if(e=/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(c)){for(var g,h=0;g=b[h];++h)e[g]=+e[g]||0;e[2]=(+e[2]||1)-1,e[3]=+e[3]||1,"Z"!==e[8]&&void 0!==e[9]&&(f=60*e[10]+e[11],"+"===e[9]&&(f=0-f)),d=Date.UTC(e[1],e[2],e[3],e[4],e[5]+f,e[6],e[7])}else d=a?a(c):0/0;return d},(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.Date)&&(Date.parse=Ember.Date.parse)}(),function(){{var a=Ember.get;Ember.set}DS.RecordArray=Ember.ArrayProxy.extend(Ember.Evented,{type:null,content:null,isLoaded:!1,isUpdating:!1,store:null,objectAtContent:function(b){var c=a(this,"content");return c.objectAt(b)},update:function(){if(!a(this,"isUpdating")){var b=a(this,"store"),c=a(this,"type");b.fetchAll(c,this)}},addRecord:function(b){a(this,"content").addObject(b)},removeRecord:function(b){a(this,"content").removeObject(b)},save:function(){var a=Ember.RSVP.all(this.invoke("save")).then(function(a){return Ember.A(a)});return DS.PromiseArray.create({promise:a})}})}(),function(){var a=Ember.get;DS.FilteredRecordArray=DS.RecordArray.extend({filterFunction:null,isLoaded:!0,replace:function(){var b=a(this,"type").toString();throw new Error("The result of a client-side filter (on "+b+") is immutable.")},updateFilter:Ember.observer(function(){var b=a(this,"manager");b.updateFilter(this,a(this,"type"),a(this,"filterFunction"))},"filterFunction")})}(),function(){{var a=Ember.get;Ember.set}DS.AdapterPopulatedRecordArray=DS.RecordArray.extend({query:null,replace:function(){var b=a(this,"type").toString();throw new Error("The result of a server query (on "+b+") is immutable.")},load:function(b){var c=a(this,"store"),d=a(this,"type"),e=c.pushMany(d,b),f=c.metadataFor(d);this.setProperties({content:Ember.A(e),isLoaded:!0,meta:f}),Ember.run.once(this,"trigger","didLoad")}})}(),function(){var a=Ember.get,b=Ember.set,c=Ember.EnumerableUtils.map;DS.ManyArray=DS.RecordArray.extend({init:function(){this._super.apply(this,arguments),this._changesToSync=Ember.OrderedSet.create()},owner:null,isPolymorphic:!1,isLoaded:!1,loadingRecordsCount:function(a){this.loadingRecordsCount=a},loadedRecord:function(){this.loadingRecordsCount--,0===this.loadingRecordsCount&&(b(this,"isLoaded",!0),this.trigger("didLoad"))},fetch:function(){var b=a(this,"content"),c=a(this,"store"),d=a(this,"owner"),e=Ember.RSVP.defer(),f=b.filterProperty("isEmpty",!0);c.fetchMany(f,d,e)},replaceContent:function(a,b,d){d=c(d,function(a){return Ember.assert("You cannot add '"+a.constructor.typeKey+"' records to this relationship (only '"+this.type.typeKey+"' allowed)",!this.type||a instanceof this.type),a},this),this._super(a,b,d)},arrangedContentDidChange:function(){Ember.run.once(this,"fetch")},arrayContentWillChange:function(b,c){var d=a(this,"owner"),e=a(this,"name");if(!d._suspendedRelationships)for(var f=b;b+c>f;f++){var g=a(this,"content").objectAt(f),h=DS.RelationshipChange.createChange(d,g,a(this,"store"),{parentType:d.constructor,changeType:"remove",kind:"hasMany",key:e});this._changesToSync.add(h)}return this._super.apply(this,arguments)},arrayContentDidChange:function(b,c,d){this._super.apply(this,arguments);var e=a(this,"owner"),f=a(this,"name"),g=a(this,"store");if(!e._suspendedRelationships){for(var h=b;b+d>h;h++){var i=a(this,"content").objectAt(h),j=DS.RelationshipChange.createChange(e,i,g,{parentType:e.constructor,changeType:"add",kind:"hasMany",key:f});j.hasManyName=f,this._changesToSync.add(j)}this._changesToSync.forEach(function(a){a.sync()}),this._changesToSync.clear()}},createRecord:function(b){var c,d=a(this,"owner"),e=a(d,"store"),f=a(this,"type");return Ember.assert("You cannot add '"+f.typeKey+"' records to this polymorphic relationship.",!a(this,"isPolymorphic")),c=e.createRecord.call(e,f,b),this.pushObject(c),c}})}(),function(){function a(a){var b=Ember.meta(a,!0),c="DS.Mappable",d=b[c];return d||(b[c]={}),b.hasOwnProperty(c)||(b[c]=Ember.create(b[c])),b[c]}var b=(Ember.get,Ember.ArrayPolyfills.forEach),c=function(a){return a},d=function(a){return a},e=function(a,b){return b};DS._Mappable=Ember.Mixin.create({createInstanceMapFor:function(b){var c=a(this);if(c.values=c.values||{},c.values[b])return c.values[b];for(var d=c.values[b]=new Ember.Map,e=this.constructor;e&&e!==DS.Store;)this._copyMap(b,e,d),e=e.superclass;return c.values[b]=d,d},_copyMap:function(f,g,h){function i(a,b){var f=(g.transformMapKey||d)(a,b),i=(g.transformMapValue||e)(a,b),j=h.get(f),k=i;j&&(k=(this.constructor.resolveMapConflict||c)(j,k)),h.set(f,k)}var j=a(g),k=j[f];k&&b.call(k,i,this)}}),DS._Mappable.generateMapFunctionFor=function(b,c){return function(d,e){var f=a(this),g=f[b]||Ember.MapWithDefault.create({defaultValue:function(){return{}}});c.call(this,d,e,g),f[b]=g}}}(),function(){function a(a,c,e,f){return c.eachRelationship(function(c,g){if(e.links&&e.links[c])return f&&g.options.async&&(f._relationships[c]=null),void 0;var h=g.kind,i=e[c];null!=i&&("belongsTo"===h?b(a,e,c,g,i):"hasMany"===h&&d(a,e,c,g,i))}),e}function b(a,b,d,e,f){if(!(t(f)||f instanceof DS.Model)){var g;"number"==typeof f||"string"==typeof f?(g=c(e,d,b),b[d]=a.recordForId(g,f)):"object"==typeof f&&(b[d]=a.recordForId(f.type,f.id))}}function c(a,b,c){return a.options.polymorphic?c[b+"Type"]:a.type}function d(a,c,d,e,f){for(var g=0,h=f.length;h>g;g++)b(a,f,g,e,f[g])}function e(a){return DS.PromiseObject.create({promise:a})}function f(a){return DS.PromiseArray.create({promise:a})}function g(a){return a&&"function"==typeof a.then}function h(a,b,c){return a.lookup("serializer:"+b)||a.lookup("serializer:application")||a.lookup("serializer:"+c)||a.lookup("serializer:_default")}function i(a,b){var c=a.serializer,d=a.defaultSerializer,e=a.container;return e&&void 0===c&&(c=h(e,b.typeKey,d)),(null===c||void 0===c)&&(c={extract:function(a,b,c){return c}}),c}function j(a,b,c,d,e){var f=a.find(b,c,d),g=i(a,c);return x(f).then(function(a){return Ember.assert("You made a request for a "+c.typeKey+" with id "+d+", but the adapter's response did not have any data",a),a=g.extract(b,c,a,d,"find"),b.push(c,a)},function(a){var e=b.getById(c,d);throw e.notFound(),a}).then(e.resolve,e.reject)}function k(a,b,c,d,e,f){var g=a.findMany(b,c,d,e),h=i(a,c);return x(g).then(function(a){a=h.extract(b,c,a,null,"findMany"),Ember.assert("The response from a findMany must be an Array, not "+Ember.inspect(a),"array"===Ember.typeOf(a)),b.pushMany(c,a)}).then(f.resolve,f.reject)}function l(a,b,c,d,e,f){var g=a.findHasMany(b,c,d,e),h=i(a,e.type);return x(g).then(function(a){a=h.extract(b,e.type,a,null,"findHasMany"),Ember.assert("The response from a findHasMany must be an Array, not "+Ember.inspect(a),"array"===Ember.typeOf(a));var d=b.pushMany(e.type,a);c.updateHasMany(e.key,d)}).then(f.resolve,f.reject)}function m(a,b,c,d,e,f){var g=a.findBelongsTo(b,c,d,e),h=i(a,e.type);return x(g).then(function(a){a=h.extract(b,e.type,a,null,"findBelongsTo");var c=b.push(e.type,a);c.updateBelongsTo(e.key,c)}).then(f.resolve,f.reject)}function n(a,b,c,d,e){var f=a.findAll(b,c,d),g=i(a,c);return x(f).then(function(a){return a=g.extract(b,c,a,null,"findAll"),Ember.assert("The response from a findAll must be an Array, not "+Ember.inspect(a),"array"===Ember.typeOf(a)),b.pushMany(c,a),b.didUpdateAll(c),b.all(c)}).then(e.resolve,e.reject)}function o(a,b,c,d,e,f){var g=a.findQuery(b,c,d,e),h=i(a,c);return x(g).then(function(a){return a=h.extract(b,c,a,null,"findAll"),Ember.assert("The response from a findQuery must be an Array, not "+Ember.inspect(a),"array"===Ember.typeOf(a)),e.load(a),e}).then(f.resolve,f.reject)}function p(a,b,c,d,e){var f=d.constructor,h=a[c](b,f,d),j=i(a,f);return Ember.assert("Your adapter's '"+c+"' method must return a promise, but it returned "+h,g(h)),h.then(function(a){return a&&(a=j.extract(b,f,a,q(d,"id"),c)),b.didSaveRecord(d,a),d},function(a){throw a instanceof DS.InvalidError?b.recordWasInvalid(d,a.errors):b.recordWasError(d,a),a}).then(e.resolve,e.reject)}var q=Ember.get,r=Ember.set,s=Ember.run.once,t=Ember.isNone,u=Ember.EnumerableUtils.forEach,v=Ember.EnumerableUtils.indexOf,w=Ember.EnumerableUtils.map,x=Ember.RSVP.resolve,y=function(a){return null==a?null:a+""};DS.Store=Ember.Object.extend(DS._Mappable,{init:function(){this.typeMaps={},this.recordArrayManager=DS.RecordArrayManager.create({store:this}),this._relationshipChanges={},this._pendingSave=[]},adapter:"_rest",serialize:function(a,b){return this.serializerFor(a.constructor.typeKey).serialize(a,b)},defaultAdapter:Ember.computed(function(){var a=q(this,"adapter");return Ember.assert("You tried to set `adapter` property to an instance of `DS.Adapter`, where it should be a name or a factory",!(a instanceof DS.Adapter)),"string"==typeof a&&(a=this.container.lookup("adapter:"+a)||this.container.lookup("adapter:application")||this.container.lookup("adapter:_rest")),DS.Adapter.detect(a)&&(a=a.create({container:this.container})),a}).property("adapter"),createRecord:function(a,b){a=this.modelFor(a),b=b||{},t(b.id)&&(b.id=this._generateId(a)),b.id=y(b.id);var c=this.buildRecord(a,b.id);return c.loadedData(),c.setProperties(b),c},_generateId:function(a){var b=this.adapterFor(a);return b&&b.generateIdForRecord?b.generateIdForRecord(this):null},deleteRecord:function(a){a.deleteRecord()},unloadRecord:function(a){a.unloadRecord()},find:function(a,b){return void 0===b?this.findAll(a):"object"===Ember.typeOf(b)?this.findQuery(a,b):this.findById(a,y(b))},findById:function(a,b){a=this.modelFor(a);var c=this.recordForId(a,b),d=this.fetchRecord(c)||x(c);return e(d)},findByIds:function(a,b){var c=this;return f(Ember.RSVP.all(w(b,function(b){return c.findById(a,b)})).then(function(a){return Ember.A(a)}))},fetchRecord:function(a){if(t(a))return null;if(a._loadingPromise)return a._loadingPromise;if(!q(a,"isEmpty"))return null;var b=a.constructor,c=q(a,"id"),d=Ember.RSVP.defer();a.loadingData(d.promise);var e=this.adapterFor(b);return Ember.assert("You tried to find a record but you have no adapter (for "+b+")",e),Ember.assert("You tried to find a record but your adapter (for "+b+") does not implement 'find'",e.find),j(e,this,b,c,d),d.promise},getById:function(a,b){return a=this.modelFor(a),this.hasRecordForId(a,b)?this.recordForId(a,b):null},reloadRecord:function(a,b){var c=a.constructor,d=this.adapterFor(c),e=q(a,"id");return Ember.assert("You cannot reload a record without an ID",e),Ember.assert("You tried to reload a record but you have no adapter (for "+c+")",d),Ember.assert("You tried to reload a record but your adapter does not implement `find`",d.find),j(d,this,c,e,b)},fetchMany:function(a,b,c){if(a.length){var d=Ember.MapWithDefault.create({defaultValue:function(){return Ember.A()}});u(a,function(a){d.get(a.constructor).push(a)}),u(d,function(a,d){var e=d.mapProperty("id"),f=this.adapterFor(a);Ember.assert("You tried to load many records but you have no adapter (for "+a+")",f),Ember.assert("You tried to load many records but your adapter does not implement `findMany`",f.findMany),k(f,this,a,e,b,c)},this)}},hasRecordForId:function(a,b){return b=y(b),!!this.typeMapFor(a).idToRecord[b]},recordForId:function(a,b){a=this.modelFor(a),b=y(b);var c=this.typeMapFor(a).idToRecord[b];return c||(c=this.buildRecord(a,b)),c},findMany:function(a,b,c,d){c=this.modelFor(c),b=Ember.A(b);var e=b.filterProperty("isEmpty",!0),f=this.recordArrayManager.createManyArray(c,b);return u(e,function(a){a.loadingData()}),f.loadingRecordsCount=e.length,e.length?(u(e,function(a){this.recordArrayManager.registerWaitingRecordArray(a,f)},this),this.fetchMany(e,a,d)):(d&&d.resolve(),f.set("isLoaded",!0),Ember.run.once(f,"trigger","didLoad")),f},findHasMany:function(a,b,c,d){var e=this.adapterFor(a.constructor);Ember.assert("You tried to load a hasMany relationship but you have no adapter (for "+a.constructor+")",e),Ember.assert("You tried to load a hasMany relationship from a specified `link` in the original payload but your adapter does not implement `findHasMany`",e.findHasMany);var f=this.recordArrayManager.createManyArray(c.type,Ember.A([]));return l(e,this,a,b,c,d),f},findBelongsTo:function(a,b,c,d){var e=this.adapterFor(a.constructor);Ember.assert("You tried to load a belongsTo relationship but you have no adapter (for "+a.constructor+")",e),Ember.assert("You tried to load a belongsTo relationship from a specified `link` in the original payload but your adapter does not implement `findBelongsTo`",e.findBelongsTo),m(e,this,a,b,c,d)},findQuery:function(a,b){a=this.modelFor(a);var c=DS.AdapterPopulatedRecordArray.create({type:a,query:b,content:Ember.A(),store:this}),d=this.adapterFor(a),e=Ember.RSVP.defer();return Ember.assert("You tried to load a query but you have no adapter (for "+a+")",d),Ember.assert("You tried to load a query but your adapter does not implement `findQuery`",d.findQuery),o(d,this,a,b,c,e),f(e.promise)},findAll:function(a){return a=this.modelFor(a),this.fetchAll(a,this.all(a))},fetchAll:function(a,b){var c=this.adapterFor(a),d=this.typeMapFor(a).metadata.since,e=Ember.RSVP.defer();return r(b,"isUpdating",!0),Ember.assert("You tried to load all records but you have no adapter (for "+a+")",c),Ember.assert("You tried to load all records but your adapter does not implement `findAll`",c.findAll),n(c,this,a,d,e),f(e.promise)},didUpdateAll:function(a){var b=this.typeMapFor(a).findAllCache;r(b,"isUpdating",!1)},all:function(a){a=this.modelFor(a);var b=this.typeMapFor(a),c=b.findAllCache;if(c)return c;var d=DS.RecordArray.create({type:a,content:Ember.A(),store:this,isLoaded:!0});return this.recordArrayManager.registerFilteredRecordArray(d,a),b.findAllCache=d,d},unloadAll:function(a){a=this.modelFor(a);for(var b,c=this.typeMapFor(a),d=c.records;b=d.pop();)b.unloadRecord()},filter:function(a,b,c){var d;3===arguments.length?d=this.findQuery(a,b):2===arguments.length&&(c=b),a=this.modelFor(a);var e=DS.FilteredRecordArray.create({type:a,content:Ember.A(),store:this,manager:this.recordArrayManager,filterFunction:c});return this.recordArrayManager.registerFilteredRecordArray(e,a,c),d?d.then(function(){return e}):e},recordIsLoaded:function(a,b){return this.hasRecordForId(a,b)?!q(this.recordForId(a,b),"isEmpty"):!1},metadataFor:function(a){return a=this.modelFor(a),this.typeMapFor(a).metadata},dataWasUpdated:function(a,b){q(b,"isDeleted")||q(b,"isLoaded")&&this.recordArrayManager.recordDidChange(b)},scheduleSave:function(a,b){a.adapterWillCommit(),this._pendingSave.push([a,b]),s(this,"flushPendingSave")},flushPendingSave:function(){var a=this._pendingSave.slice();this._pendingSave=[],u(a,function(a){var b,c=a[0],d=a[1],e=this.adapterFor(c.constructor);b=q(c,"isNew")?"createRecord":q(c,"isDeleted")?"deleteRecord":"updateRecord",p(e,this,b,c,d)},this)},didSaveRecord:function(b,c){c&&(c=a(this,b.constructor,c,b),this.updateId(b,c)),b.adapterDidCommit(c)},recordWasInvalid:function(a,b){a.adapterDidInvalidate(b)},recordWasError:function(a){a.adapterDidError()},updateId:function(a,b){var c=q(a,"id"),d=y(b.id);Ember.assert("An adapter cannot assign a new id to a record that already has an id. "+a+" had id: "+c+" and you tried to update it with "+d+". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.",null===c||d===c),this.typeMapFor(a.constructor).idToRecord[d]=a,r(a,"id",d)},typeMapFor:function(a){var b,c=q(this,"typeMaps"),d=Ember.guidFor(a);return(b=c[d])?b:(b={idToRecord:{},records:[],metadata:{}},c[d]=b,b)},_load:function(a,b,c){var d=y(b.id),e=this.recordForId(a,d);return e.setupData(b,c),this.recordArrayManager.recordDidChange(e),e},modelFor:function(a){if("string"!=typeof a)return a;var b=this.container.lookupFactory("model:"+a);return Ember.assert("No model was found for '"+a+"'",b),b.store=this,b.typeKey=a,b},push:function(b,c,d){return Ember.assert("You must include an `id` in a hash passed to `push`",null!=c.id),b=this.modelFor(b),c=a(this,b,c),this._load(b,c,d),this.recordForId(b,c.id)},pushPayload:function(a,b){var c=this.serializerFor(a);c.pushPayload(this,b)},update:function(a,b){return Ember.assert("You must include an `id` in a hash passed to `update`",null!=b.id),this.push(a,b,!0)},pushMany:function(a,b){return w(b,function(b){return this.push(a,b)},this)},metaForType:function(a,b){a=this.modelFor(a),Ember.merge(this.typeMapFor(a).metadata,b)},buildRecord:function(a,b,c){var d=this.typeMapFor(a),e=d.idToRecord;Ember.assert("The id "+b+" has already been used with another record of type "+a.toString()+".",!b||!e[b]);var f=a._create({id:b,store:this,container:this.container});return c&&f.setupData(c),b&&(e[b]=f),d.records.push(f),f},dematerializeRecord:function(a){var b=a.constructor,c=this.typeMapFor(b),d=q(a,"id");a.updateRecordArrays(),d&&delete c.idToRecord[d];var e=v(c.records,a);c.records.splice(e,1)},addRelationshipChangeFor:function(a,b,c,d,e){var f=a.clientId,g=c?c:c,h=b+d,i=this._relationshipChanges;f in i||(i[f]={}),g in i[f]||(i[f][g]={}),h in i[f][g]||(i[f][g][h]={}),i[f][g][h][e.changeType]=e},removeRelationshipChangeFor:function(a,b,c,d,e){var f=a.clientId,g=c?c.clientId:c,h=this._relationshipChanges,i=b+d;f in h&&g in h[f]&&i in h[f][g]&&delete h[f][g][i][e]},relationshipChangePairsFor:function(a){var b=[];if(!a)return b;var c=this._relationshipChanges[a.clientId];for(var d in c)if(c.hasOwnProperty(d))for(var e in c[d])c[d].hasOwnProperty(e)&&b.push(c[d][e]);return b},adapterFor:function(a){var b,c=this.container;return c&&(b=c.lookup("adapter:"+a.typeKey)||c.lookup("adapter:application")),b||q(this,"defaultAdapter")},serializerFor:function(a){a=this.modelFor(a);var b=this.adapterFor(a);return h(this.container,a.typeKey,b&&b.defaultSerializer)}}),DS.PromiseArray=Ember.ArrayProxy.extend(Ember.PromiseProxyMixin),DS.PromiseObject=Ember.ObjectProxy.extend(Ember.PromiseProxyMixin)}(),function(){function a(b){var c,d={};for(var e in b)c=b[e],d[e]=c&&"object"==typeof c?a(c):c;return d}function b(a,b){for(var c in b)a[c]=b[c];return a}function c(c){var d=a(i);return b(d,c)}function d(a,c,e){a=b(c?Ember.create(c):{},a),a.parentState=c,a.stateName=e;for(var f in a)a.hasOwnProperty(f)&&"parentState"!==f&&"stateName"!==f&&"object"==typeof a[f]&&(a[f]=d(a[f],a,e+"."+f));return a}var e=Ember.get,f=Ember.set,g=function(a){var b,c,d,e=Ember.keys(a);for(b=0,c=e.length;c>b;b++)if(d=e[b],a.hasOwnProperty(d)&&a[d])return!0;return!1},h=function(a,b){b.value===b.originalValue?(delete a._attributes[b.name],a.send("propertyWasReset",b.name)):b.value!==b.oldValue&&a.send("becomeDirty"),a.updateRecordArraysLater()},i={initialState:"uncommitted",isDirty:!0,uncommitted:{didSetProperty:h,propertyWasReset:function(a){var b=!1;for(var c in a._attributes){b=!0;break}b||a.send("rolledBack")},pushedData:Ember.K,becomeDirty:Ember.K,willCommit:function(a){a.transitionTo("inFlight")},reloadRecord:function(a,b){e(a,"store").reloadRecord(a,b)},rolledBack:function(a){a.transitionTo("loaded.saved")},becameInvalid:function(a){a.transitionTo("invalid")},rollback:function(a){a.rollback()}},inFlight:{isSaving:!0,didSetProperty:h,becomeDirty:Ember.K,pushedData:Ember.K,willCommit:Ember.K,didCommit:function(a){var b=e(this,"dirtyType");a.transitionTo("saved"),a.send("invokeLifecycleCallbacks",b)},becameInvalid:function(a,b){f(a,"errors",b),a.transitionTo("invalid"),a.send("invokeLifecycleCallbacks")},becameError:function(a){a.transitionTo("uncommitted"),a.triggerLater("becameError",a)}},invalid:{isValid:!1,deleteRecord:function(a){a.transitionTo("deleted.uncommitted"),a.clearRelationships()},didSetProperty:function(a,b){var c=e(a,"errors"),d=b.name;f(c,d,null),g(c)||a.send("becameValid"),h(a,b)},becomeDirty:Ember.K,rollback:function(a){a.send("becameValid"),a.send("rollback")},becameValid:function(a){a.transitionTo("uncommitted")},invokeLifecycleCallbacks:function(a){a.triggerLater("becameInvalid",a)}}},j=c({dirtyType:"created",isNew:!0});j.uncommitted.rolledBack=function(a){a.transitionTo("deleted.saved")};var k=c({dirtyType:"updated"});j.uncommitted.deleteRecord=function(a){a.clearRelationships(),a.transitionTo("deleted.saved")},j.uncommitted.rollback=function(a){i.uncommitted.rollback.apply(this,arguments),a.transitionTo("deleted.saved")},k.uncommitted.deleteRecord=function(a){a.transitionTo("deleted.uncommitted"),a.clearRelationships()};var l={isEmpty:!1,isLoading:!1,isLoaded:!1,isDirty:!1,isSaving:!1,isDeleted:!1,isNew:!1,isValid:!0,rolledBack:Ember.K,propertyWasReset:Ember.K,empty:{isEmpty:!0,loadingData:function(a,b){a._loadingPromise=b,a.transitionTo("loading")},loadedData:function(a){a.transitionTo("loaded.created.uncommitted"),a.suspendRelationshipObservers(function(){a.notifyPropertyChange("data")})},pushedData:function(a){a.transitionTo("loaded.saved"),a.triggerLater("didLoad")}},loading:{isLoading:!0,exit:function(a){a._loadingPromise=null},pushedData:function(a){a.transitionTo("loaded.saved"),a.triggerLater("didLoad"),f(a,"isError",!1)},becameError:function(a){a.triggerLater("becameError",a)},notFound:function(a){a.transitionTo("empty")}},loaded:{initialState:"saved",isLoaded:!0,saved:{setup:function(a){var b=a._attributes,c=!1;for(var d in b)if(b.hasOwnProperty(d)){c=!0;break}c&&a.adapterDidDirty()},didSetProperty:h,pushedData:Ember.K,becomeDirty:function(a){a.transitionTo("updated.uncommitted")},willCommit:function(a){a.transitionTo("updated.inFlight")},reloadRecord:function(a,b){e(a,"store").reloadRecord(a,b)},deleteRecord:function(a){a.transitionTo("deleted.uncommitted"),a.clearRelationships()},unloadRecord:function(a){a.clearRelationships(),a.transitionTo("deleted.saved")},didCommit:function(a){a.send("invokeLifecycleCallbacks",e(a,"lastDirtyType"))}},created:j,updated:k},deleted:{initialState:"uncommitted",dirtyType:"deleted",isDeleted:!0,isLoaded:!0,isDirty:!0,setup:function(a){var b=e(a,"store");b.recordArrayManager.remove(a)},uncommitted:{willCommit:function(a){a.transitionTo("inFlight")},rollback:function(a){a.rollback()},becomeDirty:Ember.K,deleteRecord:Ember.K,rolledBack:function(a){a.transitionTo("loaded.saved")}},inFlight:{isSaving:!0,willCommit:Ember.K,didCommit:function(a){a.transitionTo("saved"),a.send("invokeLifecycleCallbacks")},becameError:function(a){a.transitionTo("uncommitted"),a.triggerLater("becameError",a)}},saved:{isDirty:!1,setup:function(a){var b=e(a,"store");b.dematerializeRecord(a)},invokeLifecycleCallbacks:function(a){a.triggerLater("didDelete",a),a.triggerLater("didCommit",a)}}},invokeLifecycleCallbacks:function(a,b){"created"===b?a.triggerLater("didCreate",a):a.triggerLater("didUpdate",a),a.triggerLater("didCommit",a)}};l=d(l,null,"root"),DS.RootState=l}(),function(){var a=Ember.get,b=Ember.set,c=Ember.merge,d=Ember.run.once,e=Ember.computed(function(b){return a(a(this,"currentState"),b)}).property("currentState").readOnly();DS.Model=Ember.Object.extend(Ember.Evented,{isEmpty:e,isLoading:e,isLoaded:e,isDirty:e,isSaving:e,isDeleted:e,isNew:e,isValid:e,dirtyType:e,isError:!1,isReloading:!1,clientId:null,id:null,transaction:null,currentState:null,errors:null,serialize:function(b){var c=a(this,"store");return c.serialize(this,b)},toJSON:function(a){var b=DS.JSONSerializer.create({container:this.container});return b.serialize(this,a)},didLoad:Ember.K,didReload:Ember.K,didUpdate:Ember.K,didCreate:Ember.K,didDelete:Ember.K,becameInvalid:Ember.K,becameError:Ember.K,data:Ember.computed(function(){return this._data=this._data||{},this._data}).property(),_data:null,init:function(){b(this,"currentState",DS.RootState.empty),this._super(),this._setup()},_setup:function(){this._changesToSync={},this._deferredTriggers=[],this._data={},this._attributes={},this._inFlightAttributes={},this._relationships={}},send:function(b,c){var d=a(this,"currentState");return d[b]||this._unhandledEvent(d,b,c),d[b](this,c)},transitionTo:function(c){var d=c.split(".",1),e=a(this,"currentState"),f=e;do f.exit&&f.exit(this),f=f.parentState;while(!f.hasOwnProperty(d));var g,h,i=c.split("."),j=[],k=[];for(g=0,h=i.length;h>g;g++)f=f[i[g]],f.enter&&k.push(f),f.setup&&j.push(f);for(g=0,h=k.length;h>g;g++)k[g].enter(this);for(b(this,"currentState",f),g=0,h=j.length;h>g;g++)j[g].setup(this)},_unhandledEvent:function(a,b,c){var d="Attempted to handle event `"+b+"` ";throw d+="on "+String(this)+" while in state ",d+=a.stateName+". ",void 0!==c&&(d+="Called with "+Ember.inspect(c)+"."),new Ember.Error(d)},withTransaction:function(b){var c=a(this,"transaction");c&&b(c)},loadingData:function(a){this.send("loadingData",a)},loadedData:function(){this.send("loadedData")},notFound:function(){this.send("notFound")},pushedData:function(){this.send("pushedData")},deleteRecord:function(){this.send("deleteRecord")},unloadRecord:function(){Ember.assert("You can only unload a loaded, non-dirty record.",!a(this,"isDirty")),this.send("unloadRecord")},clearRelationships:function(){this.eachRelationship(function(a,c){if("belongsTo"===c.kind)b(this,a,null);else if("hasMany"===c.kind){var d=this._relationships[c.name];d&&d.clear()}},this)},updateRecordArrays:function(){var b=a(this,"store");b&&b.dataWasUpdated(this.constructor,this)},changedAttributes:function(){var b,c=a(this,"_data"),d=a(this,"_attributes"),e={};for(b in d)e[b]=[c[b],d[b]];return e},adapterWillCommit:function(){this.send("willCommit")},adapterDidCommit:function(a){b(this,"isError",!1),a?this._data=a:Ember.mixin(this._data,this._inFlightAttributes),this._inFlightAttributes={},this.send("didCommit"),this.updateRecordArraysLater(),a&&this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},adapterDidDirty:function(){this.send("becomeDirty"),this.updateRecordArraysLater()
},dataDidChange:Ember.observer(function(){this.reloadHasManys()},"data"),reloadHasManys:function(){var b=a(this.constructor,"relationshipsByName");this.updateRecordArraysLater(),b.forEach(function(a,b){this._data.links&&this._data.links[a]||"hasMany"===b.kind&&this.hasManyDidChange(b.key)},this)},hasManyDidChange:function(a){var c=this._relationships[a];if(c){var d=this._data[a]||[];b(c,"content",Ember.A(d)),b(c,"isLoaded",!0),c.trigger("didLoad")}},updateRecordArraysLater:function(){Ember.run.once(this,this.updateRecordArrays)},setupData:function(a,b){b?Ember.merge(this._data,a):this._data=a;var c=this._relationships;this.eachRelationship(function(b,d){a.links&&a.links[b]||d.options.async&&(c[b]=null)}),a&&this.pushedData(),this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},materializeId:function(a){b(this,"id",a)},materializeAttributes:function(a){Ember.assert("Must pass a hash of attributes to materializeAttributes",!!a),c(this._data,a)},materializeAttribute:function(a,b){this._data[a]=b},updateHasMany:function(a,b){this._data[a]=b,this.hasManyDidChange(a)},updateBelongsTo:function(a,b){this._data[a]=b},rollback:function(){this._attributes={},a(this,"isError")&&(this._inFlightAttributes={},b(this,"isError",!1)),this.send("rolledBack"),this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},toStringExtension:function(){return a(this,"id")},suspendRelationshipObservers:function(b,c){var d=a(this.constructor,"relationshipNames").belongsTo,e=this;try{this._suspendedRelationships=!0,Ember._suspendObservers(e,d,null,"belongsToDidChange",function(){Ember._suspendBeforeObservers(e,d,null,"belongsToWillChange",function(){b.call(c||e)})})}finally{this._suspendedRelationships=!1}},save:function(){var a=Ember.RSVP.defer();return this.get("store").scheduleSave(this,a),this._inFlightAttributes=this._attributes,this._attributes={},DS.PromiseObject.create({promise:a.promise})},reload:function(){b(this,"isReloading",!0);var a=Ember.RSVP.defer(),c=this;return a.promise=a.promise.then(function(){return c.set("isReloading",!1),c.set("isError",!1),c},function(a){throw c.set("isError",!0),a}),this.send("reloadRecord",a),DS.PromiseObject.create({promise:a.promise})},adapterDidUpdateAttribute:function(a,b){void 0!==b?(this._data[a]=b,this.notifyPropertyChange(a)):this._data[a]=this._inFlightAttributes[a],this.updateRecordArraysLater()},adapterDidInvalidate:function(a){this.send("becameInvalid",a)},adapterDidError:function(){this.send("becameError"),b(this,"isError",!0)},trigger:function(a){Ember.tryInvoke(this,a,[].slice.call(arguments,1)),this._super.apply(this,arguments)},triggerLater:function(){this._deferredTriggers.push(arguments),d(this,"_triggerDeferredTriggers")},_triggerDeferredTriggers:function(){for(var a=0,b=this._deferredTriggers.length;b>a;a++)this.trigger.apply(this,this._deferredTriggers[a]);this._deferredTriggers=[]}}),DS.Model.reopenClass({_create:DS.Model.create,create:function(){throw new Ember.Error("You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.")}})}(),function(){function a(a,b){return"function"==typeof b.defaultValue?b.defaultValue():b.defaultValue}function b(a,b){return a._attributes.hasOwnProperty(b)||a._inFlightAttributes.hasOwnProperty(b)||a._data.hasOwnProperty(b)}function c(a,b){return a._attributes.hasOwnProperty(b)?a._attributes[b]:a._inFlightAttributes.hasOwnProperty(b)?a._inFlightAttributes[b]:a._data[b]}var d=Ember.get;DS.Model.reopenClass({attributes:Ember.computed(function(){var a=Ember.Map.create();return this.eachComputedProperty(function(b,c){c.isAttribute&&(Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.toString(),"id"!==b),c.name=b,a.set(b,c))}),a}),transformedAttributes:Ember.computed(function(){var a=Ember.Map.create();return this.eachAttribute(function(b,c){c.type&&a.set(b,c.type)}),a}),eachAttribute:function(a,b){d(this,"attributes").forEach(function(c,d){a.call(b,c,d)},b)},eachTransformedAttribute:function(a,b){d(this,"transformedAttributes").forEach(function(c,d){a.call(b,c,d)})}}),DS.Model.reopen({eachAttribute:function(a,b){this.constructor.eachAttribute(a,b)}}),DS.attr=function(d,e){e=e||{};var f={type:d,isAttribute:!0,options:e};return Ember.computed(function(d,f){if(arguments.length>1){Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.constructor.toString(),"id"!==d);var g=this._attributes[d]||this._inFlightAttributes[d]||this._data[d];return this.send("didSetProperty",{name:d,oldValue:g,originalValue:this._data[d],value:f}),this._attributes[d]=f,f}return b(this,d)?c(this,d):a(this,e,d)}).property("data").meta(f)}}(),function(){var a=DS.AttributeChange=function(a){this.record=a.record,this.store=a.store,this.name=a.name,this.value=a.value,this.oldValue=a.oldValue};a.createChange=function(b){return new a(b)},a.prototype={sync:function(){this.value!==this.oldValue&&(this.record.send("becomeDirty"),this.record.updateRecordArraysLater()),this.destroy()},destroy:function(){delete this.record._changesToSync[this.name]}}}(),function(){function a(a){return"object"==typeof a&&(!a.then||"function"!=typeof a.then)}var b=Ember.get,c=Ember.set,d=Ember.EnumerableUtils.forEach;DS.RelationshipChange=function(a){this.parentRecord=a.parentRecord,this.childRecord=a.childRecord,this.firstRecord=a.firstRecord,this.firstRecordKind=a.firstRecordKind,this.firstRecordName=a.firstRecordName,this.secondRecord=a.secondRecord,this.secondRecordKind=a.secondRecordKind,this.secondRecordName=a.secondRecordName,this.changeType=a.changeType,this.store=a.store,this.committed={}},DS.RelationshipChangeAdd=function(a){DS.RelationshipChange.call(this,a)},DS.RelationshipChangeRemove=function(a){DS.RelationshipChange.call(this,a)},DS.RelationshipChange.create=function(a){return new DS.RelationshipChange(a)},DS.RelationshipChangeAdd.create=function(a){return new DS.RelationshipChangeAdd(a)},DS.RelationshipChangeRemove.create=function(a){return new DS.RelationshipChangeRemove(a)},DS.OneToManyChange={},DS.OneToNoneChange={},DS.ManyToNoneChange={},DS.OneToOneChange={},DS.ManyToManyChange={},DS.RelationshipChange._createChange=function(a){return"add"===a.changeType?DS.RelationshipChangeAdd.create(a):"remove"===a.changeType?DS.RelationshipChangeRemove.create(a):void 0},DS.RelationshipChange.determineRelationshipType=function(a,b){var c,d,e=b.key,f=b.kind,g=a.inverseFor(e);return g&&(c=g.name,d=g.kind),g?"belongsTo"===d?"belongsTo"===f?"oneToOne":"manyToOne":"belongsTo"===f?"oneToMany":"manyToMany":"belongsTo"===f?"oneToNone":"manyToNone"},DS.RelationshipChange.createChange=function(a,b,c,d){var e,f=a.constructor;return e=DS.RelationshipChange.determineRelationshipType(f,d),"oneToMany"===e?DS.OneToManyChange.createChange(a,b,c,d):"manyToOne"===e?DS.OneToManyChange.createChange(b,a,c,d):"oneToNone"===e?DS.OneToNoneChange.createChange(a,b,c,d):"manyToNone"===e?DS.ManyToNoneChange.createChange(a,b,c,d):"oneToOne"===e?DS.OneToOneChange.createChange(a,b,c,d):"manyToMany"===e?DS.ManyToManyChange.createChange(a,b,c,d):void 0},DS.OneToNoneChange.createChange=function(a,b,c,d){var e=d.key,f=DS.RelationshipChange._createChange({parentRecord:b,childRecord:a,firstRecord:a,store:c,changeType:d.changeType,firstRecordName:e,firstRecordKind:"belongsTo"});return c.addRelationshipChangeFor(a,e,b,null,f),f},DS.ManyToNoneChange.createChange=function(a,b,c,d){var e=d.key,f=DS.RelationshipChange._createChange({parentRecord:a,childRecord:b,secondRecord:a,store:c,changeType:d.changeType,secondRecordName:d.key,secondRecordKind:"hasMany"});return c.addRelationshipChangeFor(a,e,b,null,f),f},DS.ManyToManyChange.createChange=function(a,b,c,d){var e=d.key,f=DS.RelationshipChange._createChange({parentRecord:b,childRecord:a,firstRecord:a,secondRecord:b,firstRecordKind:"hasMany",secondRecordKind:"hasMany",store:c,changeType:d.changeType,firstRecordName:e});return c.addRelationshipChangeFor(a,e,b,null,f),f},DS.OneToOneChange.createChange=function(a,b,c,d){var e;d.parentType?e=d.parentType.inverseFor(d.key).name:d.key?e=d.key:Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",!1);var f=DS.RelationshipChange._createChange({parentRecord:b,childRecord:a,firstRecord:a,secondRecord:b,firstRecordKind:"belongsTo",secondRecordKind:"belongsTo",store:c,changeType:d.changeType,firstRecordName:e});return c.addRelationshipChangeFor(a,e,b,null,f),f},DS.OneToOneChange.maintainInvariant=function(a,c,d,e){if("add"===a.changeType&&c.recordIsMaterialized(d)){var f=b(d,e);if(f){var g=DS.OneToOneChange.createChange(d,f,c,{parentType:a.parentType,hasManyName:a.hasManyName,changeType:"remove",key:a.key});c.addRelationshipChangeFor(d,e,a.parentRecord,null,g),g.sync()}}},DS.OneToManyChange.createChange=function(a,b,c,d){var e;d.parentType?(e=d.parentType.inverseFor(d.key).name,DS.OneToManyChange.maintainInvariant(d,c,a,e)):d.key?e=d.key:Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",!1);var f=DS.RelationshipChange._createChange({parentRecord:b,childRecord:a,firstRecord:a,secondRecord:b,firstRecordKind:"belongsTo",secondRecordKind:"hasMany",store:c,changeType:d.changeType,firstRecordName:e});return c.addRelationshipChangeFor(a,e,b,f.getSecondRecordName(),f),f},DS.OneToManyChange.maintainInvariant=function(a,c,d,e){if("add"===a.changeType&&d){var f=b(d,e);if(f){var g=DS.OneToManyChange.createChange(d,f,c,{parentType:a.parentType,hasManyName:a.hasManyName,changeType:"remove",key:a.key});c.addRelationshipChangeFor(d,e,a.parentRecord,g.getSecondRecordName(),g),g.sync()}}},DS.RelationshipChange.prototype={getSecondRecordName:function(){var a,b=this.secondRecordName;if(!b){if(a=this.secondRecord,!a)return;var c=this.firstRecord.constructor,d=c.inverseFor(this.firstRecordName);this.secondRecordName=d.name}return this.secondRecordName},getFirstRecordName:function(){var a=this.firstRecordName;return a},destroy:function(){var a=this.childRecord,b=this.getFirstRecordName(),c=this.getSecondRecordName(),d=this.store;d.removeRelationshipChangeFor(a,b,this.parentRecord,c,this.changeType)},getSecondRecord:function(){return this.secondRecord},getFirstRecord:function(){return this.firstRecord},coalesce:function(){var a=this.store.relationshipChangePairsFor(this.firstRecord);d(a,function(a){var b=a.add,c=a.remove;b&&c&&(b.destroy(),c.destroy())})}},DS.RelationshipChangeAdd.prototype=Ember.create(DS.RelationshipChange.create({})),DS.RelationshipChangeRemove.prototype=Ember.create(DS.RelationshipChange.create({})),DS.RelationshipChangeAdd.prototype.changeType="add",DS.RelationshipChangeAdd.prototype.sync=function(){var d=this.getSecondRecordName(),e=this.getFirstRecordName(),f=this.getFirstRecord(),g=this.getSecondRecord();g instanceof DS.Model&&f instanceof DS.Model&&("belongsTo"===this.secondRecordKind?g.suspendRelationshipObservers(function(){c(g,d,f)}):"hasMany"===this.secondRecordKind&&g.suspendRelationshipObservers(function(){var c=b(g,d);a(c)&&c.addObject(f)})),f instanceof DS.Model&&g instanceof DS.Model&&b(f,e)!==g&&("belongsTo"===this.firstRecordKind?f.suspendRelationshipObservers(function(){c(f,e,g)}):"hasMany"===this.firstRecordKind&&f.suspendRelationshipObservers(function(){var c=b(f,e);a(c)&&c.addObject(g)})),this.coalesce()},DS.RelationshipChangeRemove.prototype.changeType="remove",DS.RelationshipChangeRemove.prototype.sync=function(){var d=this.getSecondRecordName(),e=this.getFirstRecordName(),f=this.getFirstRecord(),g=this.getSecondRecord();g instanceof DS.Model&&f instanceof DS.Model&&("belongsTo"===this.secondRecordKind?g.suspendRelationshipObservers(function(){c(g,d,null)}):"hasMany"===this.secondRecordKind&&g.suspendRelationshipObservers(function(){var c=b(g,d);a(c)&&c.removeObject(f)})),f instanceof DS.Model&&b(f,e)&&("belongsTo"===this.firstRecordKind?f.suspendRelationshipObservers(function(){c(f,e,null)}):"hasMany"===this.firstRecordKind&&f.suspendRelationshipObservers(function(){var c=b(f,e);a(c)&&c.removeObject(g)})),this.coalesce()}}(),function(){function a(a,d,e){return Ember.computed(function(d,f){var g=b(this,"data"),h=b(this,"store");if(2===arguments.length)return Ember.assert("You can only add a '"+a+"' record to this relationship",!f||f instanceof h.modelFor(a)),void 0===f?null:f;var i=g.links&&g.links[d],j=g[d];if(c(j)){if(i){var k=Ember.RSVP.defer();return h.findBelongsTo(this,i,e,k),DS.PromiseObject.create({promise:k.promise})}return null}var l=h.fetchRecord(j)||Ember.RSVP.resolve(j);return DS.PromiseObject.create({promise:l})}).property("data").meta(e)}var b=Ember.get,c=(Ember.set,Ember.isNone);DS.belongsTo=function(d,e){"object"==typeof d?(e=d,d=void 0):Ember.assert("The first argument DS.belongsTo must be a model type or string, like DS.belongsTo(App.Person)",!!d&&("string"==typeof d||DS.Model.detect(d))),e=e||{};var f={type:d,isRelationship:!0,options:e,kind:"belongsTo"};return e.async?a(d,e,f):Ember.computed(function(a,e){var f,g,h=b(this,"data"),i=b(this,"store");return g="string"==typeof d?i.modelFor(d):d,2===arguments.length?(Ember.assert("You can only add a '"+d+"' record to this relationship",!e||e instanceof g),void 0===e?null:e):(f=h[a],c(f)?null:(i.fetchRecord(f),f))}).property("data").meta(f)},DS.Model.reopen({belongsToWillChange:Ember.beforeObserver(function(a,c){if(b(a,"isLoaded")){var d=b(a,c);if(d){var e=b(a,"store"),f=DS.RelationshipChange.createChange(a,d,e,{key:c,kind:"belongsTo",changeType:"remove"});f.sync(),this._changesToSync[c]=f}}}),belongsToDidChange:Ember.immediateObserver(function(a,c){if(b(a,"isLoaded")){var d=b(a,c);if(d){var e=b(a,"store"),f=DS.RelationshipChange.createChange(a,d,e,{key:c,kind:"belongsTo",changeType:"add"});f.sync()}}delete this._changesToSync[c]})})}(),function(){function a(a,c,d){return Ember.computed(function(a){if(this._relationships[a])return this._relationships[a];var e=Ember.RSVP.defer(),f=b(this,a,c,function(b,c){var f=c.links&&c.links[a];return f?b.findHasMany(this,f,d,e):b.findMany(this,c[a],d.type,e)}),g=e.promise.then(function(){return f});return DS.PromiseArray.create({promise:g})}).property("data").meta(d)}function b(a,b,c,f){var g=a._relationships;if(g[b])return g[b];var h=d(a,"data"),i=d(a,"store"),j=g[b]=f.call(a,i,h);return e(j,{owner:a,name:b,isPolymorphic:c.polymorphic})}function c(c,d){d=d||{};var e={type:c,isRelationship:!0,options:d,kind:"hasMany"};return d.async?a(c,d,e):Ember.computed(function(a){return b(this,a,d,function(b,c){var d=c[a];return Ember.assert("You looked up the '"+a+"' relationship on '"+this+"' but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.hasMany({ async: true })`)",Ember.A(d).everyProperty("isEmpty",!1)),b.findMany(this,c[a],e.type)})}).property("data").meta(e)}var d=Ember.get,e=(Ember.set,Ember.setProperties);DS.hasMany=function(a,b){return"object"==typeof a&&(b=a,a=void 0),c(a,b)}}(),function(){{var a=Ember.get;Ember.set}DS.Model.reopen({didDefineProperty:function(a,b,c){if(c instanceof Ember.Descriptor){var d=c.meta();d.isRelationship&&"belongsTo"===d.kind&&(Ember.addObserver(a,b,null,"belongsToDidChange"),Ember.addBeforeObserver(a,b,null,"belongsToWillChange")),d.parentType=a.constructor}}}),DS.Model.reopenClass({typeForRelationship:function(b){var c=a(this,"relationshipsByName").get(b);return c&&c.type},inverseFor:function(b){function c(b,d,e){e=e||[];var f=a(d,"relationships");if(f){var g=f.get(b);return g&&e.push.apply(e,f.get(b)),b.superclass&&c(b.superclass,d,e),e}}var d=this.typeForRelationship(b);if(!d)return null;var e=this.metaForProperty(b).options;if(null===e.inverse)return null;var f,g;if(e.inverse)f=e.inverse,g=Ember.get(d,"relationshipsByName").get(f).kind;else{var h=c(this,d);if(0===h.length)return null;Ember.assert("You defined the '"+b+"' relationship on "+this+", but multiple possible inverse relationships of type "+this+" were found on "+d+".",1===h.length),f=h[0].name,g=h[0].kind}return{type:d,name:f,kind:g}},relationships:Ember.computed(function(){var a=new Ember.MapWithDefault({defaultValue:function(){return[]}});return this.eachComputedProperty(function(b,c){if(c.isRelationship){"string"==typeof c.type&&(c.type=this.store.modelFor(c.type));var d=a.get(c.type);d.push({name:b,kind:c.kind})}}),a}),relationshipNames:Ember.computed(function(){var a={hasMany:[],belongsTo:[]};return this.eachComputedProperty(function(b,c){c.isRelationship&&a[c.kind].push(b)}),a}),relatedTypes:Ember.computed(function(){var b,c=Ember.A();return this.eachComputedProperty(function(d,e){e.isRelationship&&(b=e.type,"string"==typeof b&&(b=a(this,b,!1)||this.store.modelFor(b)),Ember.assert("You specified a hasMany ("+e.type+") on "+e.parentType+" but "+e.type+" was not found.",b),c.contains(b)||(Ember.assert("Trying to sideload "+d+" on "+this.toString()+" but the type doesn't exist.",!!b),c.push(b)))}),c}),relationshipsByName:Ember.computed(function(){var a,b=Ember.Map.create();return this.eachComputedProperty(function(c,d){d.isRelationship&&(d.key=c,a=d.type,a||"hasMany"!==d.kind?a||(a=c):a=Ember.String.singularize(c),"string"==typeof a&&(d.type=this.store.modelFor(a)),b.set(c,d))}),b}),fields:Ember.computed(function(){var a=Ember.Map.create();return this.eachComputedProperty(function(b,c){c.isRelationship?a.set(b,c.kind):c.isAttribute&&a.set(b,"attribute")}),a}),eachRelationship:function(b,c){a(this,"relationshipsByName").forEach(function(a,d){b.call(c,a,d)})},eachRelatedType:function(b,c){a(this,"relatedTypes").forEach(function(a){b.call(c,a)})}}),DS.Model.reopen({eachRelationship:function(a,b){this.constructor.eachRelationship(a,b)}})}(),function(){var a=Ember.get,b=(Ember.set,Ember.run.once),c=Ember.EnumerableUtils.forEach;DS.RecordArrayManager=Ember.Object.extend({init:function(){this.filteredRecordArrays=Ember.MapWithDefault.create({defaultValue:function(){return[]}}),this.changedRecords=[]},recordDidChange:function(a){this.changedRecords.push(a),b(this,this.updateRecordArrays)},recordArraysForRecord:function(a){return a._recordArrays=a._recordArrays||Ember.OrderedSet.create(),a._recordArrays},updateRecordArrays:function(){c(this.changedRecords,function(b){var d,e=b.constructor,f=this.filteredRecordArrays.get(e);c(f,function(c){d=a(c,"filterFunction"),this.updateRecordArray(c,d,e,b)},this);var g=b._loadingRecordArrays;if(g){for(var h=0,i=g.length;i>h;h++)g[h].loadedRecord();b._loadingRecordArrays=[]}},this),this.changedRecords=[]},updateRecordArray:function(a,b,c,d){var e;e=b?b(d):!0;var f=this.recordArraysForRecord(d);e?(f.add(a),a.addRecord(d)):e||(f.remove(a),a.removeRecord(d))},remove:function(a){var b=a._recordArrays;b&&c(b,function(b){b.removeRecord(a)})},updateFilter:function(b,c,d){for(var e,f=this.store.typeMapFor(c),g=f.records,h=0,i=g.length;i>h;h++)e=g[h],a(e,"isDeleted")||a(e,"isEmpty")||this.updateRecordArray(b,d,c,e)},createManyArray:function(a,b){var d=DS.ManyArray.create({type:a,content:b,store:this.store});return c(b,function(a){var b=this.recordArraysForRecord(a);b.add(d)},this),d},registerFilteredRecordArray:function(a,b,c){var d=this.filteredRecordArrays.get(b);d.push(a),this.updateFilter(a,b,c)},registerWaitingRecordArray:function(a,b){var c=a._loadingRecordArrays||[];c.push(b),a._loadingRecordArrays=c}})}(),function(){var a=Ember.get,b=(Ember.set,Ember.ArrayPolyfills.map),c=["description","fileName","lineNumber","message","name","number","stack"];DS.InvalidError=function(a){var b=Error.prototype.constructor.call(this,"The backend rejected the commit because it was invalid: "+Ember.inspect(a));this.errors=a;for(var d=0,e=c.length;e>d;d++)this[c[d]]=b[c[d]]},DS.InvalidError.prototype=Ember.create(Error.prototype),DS.Adapter=Ember.Object.extend(DS._Mappable,{find:Ember.required(Function),findAll:null,findQuery:null,generateIdForRecord:null,serialize:function(b,c){return a(b,"store").serializerFor(b.constructor.typeKey).serialize(b,c)},createRecord:Ember.required(Function),updateRecord:Ember.required(Function),deleteRecord:Ember.required(Function),findMany:function(a,c,d){var e=b.call(d,function(b){return this.find(a,c,b)},this);return Ember.RSVP.all(e)}})}(),function(){var a=Ember.get,b=Ember.String.fmt,c=Ember.EnumerableUtils.indexOf,d=0;DS.FixtureAdapter=DS.Adapter.extend({serializer:null,simulateRemoteResponse:!0,latency:50,fixturesForType:function(a){if(a.FIXTURES){var c=Ember.A(a.FIXTURES);return c.map(function(a){var c=typeof a.id;if("number"!==c&&"string"!==c)throw new Error(b("the id property must be defined as a number or string for fixture %@",[a]));return a.id=a.id+"",a})}return null},queryFixtures:function(){Ember.assert("Not implemented: You must override the DS.FixtureAdapter::queryFixtures method to support querying the fixture store.")},updateFixtures:function(a,b){a.FIXTURES||(a.FIXTURES=[]);var c=a.FIXTURES;this.deleteLoadedFixture(a,b),c.push(b)},mockJSON:function(a,b,c){return a.serializerFor(b).serialize(c,{includeId:!0})},generateIdForRecord:function(){return"fixture-"+d++},find:function(a,b,c){var d,e=this.fixturesForType(b);return Ember.assert("Unable to find fixtures for model type "+b.toString(),e),e&&(d=Ember.A(e).findProperty("id",c)),d?this.simulateRemoteCall(function(){return d},this):void 0},findMany:function(a,b,d){var e=this.fixturesForType(b);return Ember.assert("Unable to find fixtures for model type "+b.toString(),e),e&&(e=e.filter(function(a){return-1!==c(d,a.id)})),e?this.simulateRemoteCall(function(){return e},this):void 0},findAll:function(a,b){var c=this.fixturesForType(b);return Ember.assert("Unable to find fixtures for model type "+b.toString(),c),this.simulateRemoteCall(function(){return c},this)},findQuery:function(a,b,c){var d=this.fixturesForType(b);return Ember.assert("Unable to find fixtures for model type "+b.toString(),d),d=this.queryFixtures(d,c,b),d?this.simulateRemoteCall(function(){return d},this):void 0},createRecord:function(a,b,c){var d=this.mockJSON(a,b,c);return this.updateFixtures(b,d),this.simulateRemoteCall(function(){return d},this)},updateRecord:function(a,b,c){var d=this.mockJSON(a,b,c);return this.updateFixtures(b,d),this.simulateRemoteCall(function(){return d},this)},deleteRecord:function(a,b,c){var d=this.mockJSON(a,b,c);return this.deleteLoadedFixture(b,d),this.simulateRemoteCall(function(){return null})},deleteLoadedFixture:function(a,b){var d=this.findExistingFixture(a,b);if(d){var e=c(a.FIXTURES,d);return a.FIXTURES.splice(e,1),!0}},findExistingFixture:function(b,c){var d=this.fixturesForType(b),e=a(c,"id");return this.findFixtureById(d,e)},findFixtureById:function(b,c){return Ember.A(b).find(function(b){return""+a(b,"id")==""+c?!0:!1})},simulateRemoteCall:function(b,c){var d=this;return new Ember.RSVP.Promise(function(e){a(d,"simulateRemoteResponse")?Ember.run.later(function(){e(b.call(c))},a(d,"latency")):Ember.run.once(function(){e(b.call(c))})})}})}(),function(){function a(a){return null==a?null:a+""}var b=Ember.get,c=(Ember.set,Ember.ArrayPolyfills.forEach),d=Ember.ArrayPolyfills.map;DS.RESTSerializer=DS.JSONSerializer.extend({normalize:function(a,b,c){return this.normalizeId(b),this.normalizeUsingDeclaredMapping(a,b),this.normalizeAttributes(a,b),this.normalizeRelationships(a,b),this.normalizeHash&&this.normalizeHash[c]?this.normalizeHash[c](b):this._super(a,b,c)},normalizePayload:function(a,b){return b},normalizeId:function(a){var c=b(this,"primaryKey");"id"!==c&&(a.id=a[c],delete a[c])},normalizeUsingDeclaredMapping:function(a,c){var d,e,f=b(this,"attrs");if(f)for(e in f)d=f[e],c[e]=c[d],delete c[d]},normalizeAttributes:function(a,b){var c;this.keyForAttribute&&a.eachAttribute(function(a){c=this.keyForAttribute(a),a!==c&&(b[a]=b[c],delete b[c])},this)},normalizeRelationships:function(a,b){var c;this.keyForRelationship&&a.eachRelationship(function(a,d){c=this.keyForRelationship(a,d.kind),a!==c&&(b[a]=b[c],delete b[c])},this)},extractSingle:function(b,d,e,f){e=this.normalizePayload(d,e);var g,h=d.typeKey;for(var i in e){var j=this.typeForRoot(i),k=j===h;if(k&&"array"!==Ember.typeOf(e[i]))g=this.normalize(d,e[i],i);else{{b.modelFor(j)}c.call(e[i],function(c){var d=this.typeForRoot(i),e=b.modelFor(d),h=b.serializerFor(e);c=h.normalize(e,c,i);var j=k&&!f&&!g,l=k&&a(c.id)===f;j||l?g=c:b.push(d,c)},this)}}return g},extractArray:function(a,b,c){c=this.normalizePayload(b,c);var e,f=b.typeKey;for(var g in c){var h=g,i=!1;"_"===g.charAt(0)&&(i=!0,h=g.substr(1));var j=this.typeForRoot(h),k=a.modelFor(j),l=a.serializerFor(k),m=!i&&j===f,n=d.call(c[g],function(a){return l.normalize(k,a,g)},this);m?e=n:a.pushMany(j,n)}return e},pushPayload:function(a,b){b=this.normalizePayload(null,b);for(var c in b){var e=this.typeForRoot(c),f=a.modelFor(e),g=d.call(b[c],function(a){return this.normalize(f,a,c)},this);a.pushMany(e,g)}},typeForRoot:function(a){return Ember.String.singularize(a)},serialize:function(){return this._super.apply(this,arguments)},serializeIntoHash:function(a,b,c,d){a[b.typeKey]=this.serialize(c,d)},serializePolymorphicType:function(a,c,d){var e=d.key,f=b(a,e);e=this.keyForAttribute?this.keyForAttribute(e):e,c[e+"Type"]=f.constructor.typeKey}})}(),function(){var a=Ember.get,b=(Ember.set,Ember.ArrayPolyfills.forEach);DS.RESTAdapter=DS.Adapter.extend({defaultSerializer:"_rest",find:function(a,b,c){return this.ajax(this.buildURL(b.typeKey,c),"GET")},findAll:function(a,b,c){var d;return c&&(d={since:c}),this.ajax(this.buildURL(b.typeKey),"GET",{data:d})},findQuery:function(a,b,c){return this.ajax(this.buildURL(b.typeKey),"GET",{data:c})},findMany:function(a,b,c){return this.ajax(this.buildURL(b.typeKey),"GET",{data:{ids:c}})},findHasMany:function(b,c,d){var e=a(c,"id"),f=c.constructor.typeKey;return this.ajax(this.urlPrefix(d,this.buildURL(f,e)),"GET")},findBelongsTo:function(b,c,d){var e=a(c,"id"),f=c.constructor.typeKey;return this.ajax(this.urlPrefix(d,this.buildURL(f,e)),"GET")},createRecord:function(a,b,c){var d={},e=a.serializerFor(b.typeKey);return e.serializeIntoHash(d,b,c,{includeId:!0}),this.ajax(this.buildURL(b.typeKey),"POST",{data:d})},updateRecord:function(b,c,d){var e={},f=b.serializerFor(c.typeKey);f.serializeIntoHash(e,c,d);var g=a(d,"id");return this.ajax(this.buildURL(c.typeKey,g),"PUT",{data:e})},deleteRecord:function(b,c,d){var e=a(d,"id");return this.ajax(this.buildURL(c.typeKey,e),"DELETE")},buildURL:function(b,c){var d=[],e=a(this,"host"),f=this.urlPrefix();return b&&d.push(this.pathForType(b)),c&&d.push(c),f&&d.unshift(f),d=d.join("/"),!e&&d&&(d="/"+d),d},urlPrefix:function(b,c){var d=a(this,"host"),e=a(this,"namespace"),f=[];return b?"/"===b.charAt(0)?d&&(b=b.slice(1),f.push(d)):/^http(s)?:\/\//.test(b)||f.push(c):(d&&f.push(d),e&&f.push(e)),b&&f.push(b),f.join("/")},pathForType:function(a){return Ember.String.pluralize(a)},ajaxError:function(a){return a&&(a.then=null),a},ajax:function(a,c,d){var e=this;return new Ember.RSVP.Promise(function(f,g){if(d=d||{},d.url=a,d.type=c,d.dataType="json",d.context=e,d.data&&"GET"!==c&&(d.contentType="application/json; charset=utf-8",d.data=JSON.stringify(d.data)),void 0!==e.headers){var h=e.headers;d.beforeSend=function(a){b.call(Ember.keys(h),function(b){a.setRequestHeader(b,h[b])})}}d.success=function(a){Ember.run(null,f,a)},d.error=function(a){Ember.run(null,g,e.ajaxError(a))},Ember.$.ajax(d)})}})}(),function(){DS.Model.reopen({_debugInfo:function(){var a=["id"],b={belongsTo:[],hasMany:[]},c=[];this.eachAttribute(function(b){a.push(b)},this),this.eachRelationship(function(a,d){b[d.kind].push(a),c.push(a)});var d=[{name:"Attributes",properties:a,expand:!0},{name:"Belongs To",properties:b.belongsTo,expand:!0},{name:"Has Many",properties:b.hasMany,expand:!0},{name:"Flags",properties:["isLoaded","isDirty","isSaving","isDeleted","isError","isNew","isValid"]}];return{propertyInfo:{includeOtherProperties:!0,groups:d,expensiveProperties:c}}}})}(),function(){Ember.String.pluralize=function(a){return Ember.Inflector.inflector.pluralize(a)},Ember.String.singularize=function(a){return Ember.Inflector.inflector.singularize(a)}}(),function(){function a(a,b){for(var c=0,d=b.length;d>c;c++)a.uncountable[b[c]]=!0}function b(a,b){for(var c,d=0,e=b.length;e>d;d++)c=b[d],a.irregular[c[0]]=c[1],a.irregularInverse[c[1]]=c[0]}function c(c){c=c||{},c.uncountable=c.uncountable||{},c.irregularPairs=c.irregularPairs||{};var d=this.rules={plurals:c.plurals||[],singular:c.singular||[],irregular:{},irregularInverse:{},uncountable:{}};a(d,c.uncountable),b(d,c.irregularPairs)}var d=/^\s*$/;c.prototype={plural:function(a,b){this.rules.plurals.push([a,b])},singular:function(a,b){this.rules.singular.push([a,b])},uncountable:function(b){a(this.rules,[b])},irregular:function(a,c){b(this.rules,[[a,c]])},pluralize:function(a){return this.inflect(a,this.rules.plurals,this.rules.irregular)},singularize:function(a){return this.inflect(a,this.rules.singular,this.rules.irregularInverse)},inflect:function(a,b,c){var e,f,g,h,i,j,k,l;if(i=d.test(a))return a;if(h=a.toLowerCase(),j=this.rules.uncountable[h])return a;if(k=c&&c[h])return k;for(var m=b.length,n=0;m>n&&(e=b[m-1],l=e[0],!l.test(a));m--);return e=e||[],l=e[0],f=e[1],g=a.replace(l,f)}},Ember.Inflector=c}(),function(){Ember.Inflector.defaultRules={plurals:[[/$/,"s"],[/s$/i,"s"],[/^(ax|test)is$/i,"$1es"],[/(octop|vir)us$/i,"$1i"],[/(octop|vir)i$/i,"$1i"],[/(alias|status)$/i,"$1es"],[/(bu)s$/i,"$1ses"],[/(buffal|tomat)o$/i,"$1oes"],[/([ti])um$/i,"$1a"],[/([ti])a$/i,"$1a"],[/sis$/i,"ses"],[/(?:([^f])fe|([lr])f)$/i,"$1$2ves"],[/(hive)$/i,"$1s"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/(x|ch|ss|sh)$/i,"$1es"],[/(matr|vert|ind)(?:ix|ex)$/i,"$1ices"],[/^(m|l)ouse$/i,"$1ice"],[/^(m|l)ice$/i,"$1ice"],[/^(ox)$/i,"$1en"],[/^(oxen)$/i,"$1"],[/(quiz)$/i,"$1zes"]],singular:[[/s$/i,""],[/(ss)$/i,"$1"],[/(n)ews$/i,"$1ews"],[/([ti])a$/i,"$1um"],[/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i,"$1sis"],[/(^analy)(sis|ses)$/i,"$1sis"],[/([^f])ves$/i,"$1fe"],[/(hive)s$/i,"$1"],[/(tive)s$/i,"$1"],[/([lr])ves$/i,"$1f"],[/([^aeiouy]|qu)ies$/i,"$1y"],[/(s)eries$/i,"$1eries"],[/(m)ovies$/i,"$1ovie"],[/(x|ch|ss|sh)es$/i,"$1"],[/^(m|l)ice$/i,"$1ouse"],[/(bus)(es)?$/i,"$1"],[/(o)es$/i,"$1"],[/(shoe)s$/i,"$1"],[/(cris|test)(is|es)$/i,"$1is"],[/^(a)x[ie]s$/i,"$1xis"],[/(octop|vir)(us|i)$/i,"$1us"],[/(alias|status)(es)?$/i,"$1"],[/^(ox)en/i,"$1"],[/(vert|ind)ices$/i,"$1ex"],[/(matr)ices$/i,"$1ix"],[/(quiz)zes$/i,"$1"],[/(database)s$/i,"$1"]],irregularPairs:[["person","people"],["man","men"],["child","children"],["sex","sexes"],["move","moves"],["cow","kine"],["zombie","zombies"]],uncountable:["equipment","information","rice","money","species","series","fish","sheep","jeans","police"]}}(),function(){(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.String)&&(String.prototype.pluralize=function(){return Ember.String.pluralize(this)},String.prototype.singularize=function(){return Ember.String.singularize(this)})}(),function(){Ember.Inflector.inflector=new Ember.Inflector(Ember.Inflector.defaultRules)}(),function(){function a(a,d,e,f,g){var h=b(d,"attrs");h&&e.eachRelationship(function(d,e){var i,j,k,l,m=h[d],n=a.serializerFor(e.type.typeKey),o=b(n,"primaryKey");if("hasMany"===e.kind&&m&&("always"===m.embedded||"load"===m.embedded)){if(j="_"+Ember.String.pluralize(e.type.typeKey),i=this.keyForRelationship(d,e.kind),k=this.keyForAttribute(d),l=[],!f[k])return;g[j]=g[j]||[],c(f[k],function(a){l.push(a[o]),g[j].push(a)}),f[i]=l,delete f[k]}},d)}var b=Ember.get,c=Ember.EnumerableUtils.forEach;DS.ActiveModelSerializer=DS.RESTSerializer.extend({keyForAttribute:function(a){return Ember.String.decamelize(a)},keyForRelationship:function(a,b){return a=Ember.String.decamelize(a),"belongsTo"===b?a+"_id":"hasMany"===b?Ember.String.singularize(a)+"_ids":a},serializeHasMany:function(a,c,d){var e=d.key,f=b(this,"attrs"),g=f&&f[e]&&"always"===f[e].embedded;g&&(c[this.keyForAttribute(e)]=b(a,e).map(function(a){var c=a.serialize(),d=b(this,"primaryKey");
return c[d]=b(a,d),c},this))},serializeIntoHash:function(a,b,c,d){var e=Ember.String.decamelize(b.typeKey);a[e]=this.serialize(c,d)},serializePolymorphicType:function(a,c,d){var e=d.key,f=b(a,e);e=this.keyForAttribute(e),c[e+"_type"]=Ember.String.capitalize(f.constructor.typeKey)},typeForRoot:function(a){var b=Ember.String.camelize(a);return Ember.String.singularize(b)},normalizeRelationships:function(a,b){var c,d;this.keyForRelationship&&a.eachRelationship(function(a,e){e.options.polymorphic?(c=this.keyForAttribute(a),d=b[c],d&&d.type&&(d.type=this.typeForRoot(d.type))):(c=this.keyForRelationship(a,e.kind),d=b[c]),b[a]=d,a!==c&&delete b[c]},this)},extractSingle:function(b,c,d,e,f){var g=this.keyForAttribute(c.typeKey),h=d[g];return a(b,this,c,h,d),this._super(b,c,d,e,f)},extractArray:function(b,d,e){var f=this.keyForAttribute(d.typeKey),g=e[Ember.String.pluralize(f)];return c(g,function(c){a(b,this,d,c,e)},this),this._super(b,d,e)}})}(),function(){var a=Ember.EnumerableUtils.forEach;DS.ActiveModelAdapter=DS.RESTAdapter.extend({defaultSerializer:"_ams",pathForType:function(a){var b=Ember.String.decamelize(a);return Ember.String.pluralize(b)},ajaxError:function(b){var c=this._super(b);if(b&&422===b.status){var d=Ember.$.parseJSON(b.responseText).errors,e={};return a(Ember.keys(d),function(a){e[Ember.String.camelize(a)]=d[a]}),new DS.InvalidError(e)}return c}})}(),function(){Ember.onLoad("Ember.Application",function(a){a.initializer({name:"activeModelAdapter",initialize:function(a,b){b.register("serializer:_ams",DS.ActiveModelSerializer),b.register("adapter:_ams",DS.ActiveModelAdapter)}})})}()}(),DS.LSAdapter=DS.Adapter.extend(Ember.Evented,{init:function(){this._loadData()},generateIdForRecord:function(){return Math.random().toString(32).slice(2).substr(0,5)},find:function(a,b,c){var d=this._namespaceForType(b);return Ember.RSVP.resolve(Ember.copy(d.records[c]))},findMany:function(a,b,c){for(var d=this._namespaceForType(b),e=[],f=0;f<c.length;f++)e.push(Ember.copy(d.records[c[f]]));return Ember.RSVP.resolve(e)},findQuery:function(a,b,c){var d=this._namespaceForType(b),e=this.query(d.records,c);return Ember.RSVP.resolve(e)},query:function(a,b){var c,d,e,f,g,h=[];for(c in a){d=a[c];for(e in b)f=b[e],g=!1,g="[object RegExp]"===Object.prototype.toString.call(f)?f.test(d[e]):d[e]===f;g&&h.push(d)}return h},findAll:function(a,b){var c=this._namespaceForType(b),d=[];for(var e in c.records)d.push(Ember.copy(c.records[e]));return Ember.RSVP.resolve(d)},createRecord:function(a,b,c){var d=this._namespaceForType(b);return this._addRecordToNamespace(d,c),this._saveData(),Ember.RSVP.resolve()},updateRecord:function(a,b,c){var d=this._namespaceForType(b),e=c.get("id");return d.records[e]=c.toJSON({includeId:!0}),this._saveData(),Ember.RSVP.resolve()},deleteRecord:function(a,b,c){var d=this._namespaceForType(b),e=c.get("id");return delete d.records[e],this._saveData(),Ember.RSVP.resolve()},_getNamespace:function(){return this.namespace||"DS.LSAdapter"},_loadData:function(){var a=localStorage.getItem(this._getNamespace());this._data=a?JSON.parse(a):{}},_saveData:function(){localStorage.setItem(this._getNamespace(),JSON.stringify(this._data))},_namespaceForType:function(a){var b=a.url||a.toString();return this._data[b]||(this._data[b]={records:{}})},_addRecordToNamespace:function(a,b){var c=b.serialize({includeId:!0});a.records[c.id]=c}});